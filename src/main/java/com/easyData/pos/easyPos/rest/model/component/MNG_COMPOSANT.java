/**
 * jpa entit√© des composant
 * This file was generated by the Jeddict
 */
package com.easyData.pos.easyPos.rest.model.component;

import java.io.Serializable;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.ManyToMany;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import org.springframework.stereotype.Component;

/**
 * @author taleb
 */
@Component
@NamedQueries({
    @NamedQuery(name = "MNG_COMPOSANT.findAppByUser", query = ""
            + "SELECT c FROM MNG_COMPOSANT c "
                + "WHERE c.cmp_type = :type "
                + "AND EXISTS ( "
                    + "SELECT e FROM MNG_USER e "
                    + "WHERE e = :user "
                    + "AND EXISTS ( "
                        + "SELECT 1 FROM e.MNG_PACKs d "
                        + "WHERE c MEMBER OF d.mng_composants ) )"),
    
    @NamedQuery(name = "MNG_COMPOSANT.findComponentByUserIdAndComponentType", query = ""
            + "SELECT c FROM MNG_COMPOSANT c "
                + "WHERE c.cmp_type = :type "
                + "AND EXISTS ( "
                    + "SELECT e FROM MNG_USER e "
                    + "WHERE e.id = :userID "
                    + "AND EXISTS ( "
                        + "SELECT 1 FROM e.MNG_PACKs d "
                        + "WHERE c MEMBER OF d.mng_composants ) )"),
    @NamedQuery(name = "MNG_COMPOSANT.findByComponentIds",query = "SELECT e FROM MNG_COMPOSANT e WHERE e.id IN :cids"),
    @NamedQuery(name = "MNG_COMPOSANT.findAllByComponentType",query = "SELECT e FROM MNG_COMPOSANT e WHERE e.cmp_type = :mng_composant_type"),
    @NamedQuery(name = "MNG_COMPOSANT.findAllByUser",query = ""
            + "SELECT c FROM MNG_COMPOSANT c "
                + "WHERE EXISTS ( "
                    + "SELECT e FROM MNG_USER e "
                    + "WHERE e.id = :userID "
                    + "AND EXISTS ( "
                        + "SELECT 1 FROM e.MNG_PACKs d "
                        + "WHERE c MEMBER OF d.mng_composants ) )")
        
})

@Entity
@Table(indexes = {
    @Index(columnList = "cmp_type")})
public class MNG_COMPOSANT implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @Basic
    @Enumerated(EnumType.STRING)
    private MNG_COMPOSANT_TYPE cmp_type;

    @ManyToMany(targetEntity = MNG_COMPOSANT.class , fetch = FetchType.LAZY)
    private List<MNG_COMPOSANT> cmp_parents;

    @ManyToMany(targetEntity = MNG_COMPOSANT.class , fetch = FetchType.LAZY)
    private List<MNG_COMPOSANT> cmp_fils;

    @OneToMany(targetEntity = MNG_COMPOSANT_DATA.class, orphanRemoval = true)
    private List<MNG_COMPOSANT_DATA> cmp_datas;

    /**
     * retourn le id du composant
     * @return
     */
    public Long getId() {
        return this.id;
    }

    /**
     * mettre a jour le nouveau id du composant
     * @param id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * lire le type de ce composant
     * @return
     */
    public MNG_COMPOSANT_TYPE getCmp_type() {
        return this.cmp_type;
    }

    /**
     * mettre a jour le type de ce composant
     * @param cmp_type
     */
    public void setCmp_type(MNG_COMPOSANT_TYPE cmp_type) {
        this.cmp_type = cmp_type;
    }

    /**
     * lire la liste des composant parent de ce composant
     * @return
     */
    public List<MNG_COMPOSANT> getCmp_parents() {
        return this.cmp_parents;
    }

    /**
     * mettre a jour la liste des parent de ce composant
     * @param cmp_parents
     */
    public void setCmp_parents(List<MNG_COMPOSANT> cmp_parents) {
        this.cmp_parents = cmp_parents;
    }

    /**
     * lire la liste des composant fils de ce composant
     * @return
     */
    public List<MNG_COMPOSANT> getCmp_fils() {
        return this.cmp_fils;
    }

    /**
     * mettre a jour la liste des composant fils de ce composant
     * @param cmp_fils
     */
    public void setCmp_fils(List<MNG_COMPOSANT> cmp_fils) {
        this.cmp_fils = cmp_fils;
    }

    /**
     * lire la liste des information/ attribut de ce composant
     * @return
     */
    public List<MNG_COMPOSANT_DATA> getCmp_datas() {
        return this.cmp_datas;
    }

    /**
     * mettre a jour la liste des information / attribut de ce composant
     * @param cmp_datas
     */
    public void setCmp_datas(List<MNG_COMPOSANT_DATA> cmp_datas) {
        this.cmp_datas = cmp_datas;
    }

}
